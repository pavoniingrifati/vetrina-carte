<!doctype html>
<html lang="it">
<head>
  <meta charset="utf-8" />
  <title>Carte – TOTS</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { --bg:#0f1115; --panel:#151824; --ink:#e7e9ee; --muted:#aab0bd; --chip:#23283a; --accent:#69a1ff; }
    *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--ink);font:15px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Arial}
    header{display:flex;flex-wrap:wrap;gap:10px;align-items:center;justify-content:space-between;padding:16px 20px;border-bottom:1px solid #1d2231}
    .title{font-weight:800;font-size:18px}
    .badge{background:var(--accent);color:#fff;border-radius:8px;padding:3px 8px;font-weight:700;font-size:12px;margin-left:6px}
    .controls{display:flex;gap:8px;flex-wrap:wrap}
    select,input[type="search"]{background:var(--panel);border:1px solid #21283a;color:var(--ink);padding:10px 12px;border-radius:12px;min-width:180px}
    main{max-width:1200px;margin:0 auto;padding:18px}
    .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:16px}
    .card{background:var(--panel);border:1px solid #1c2335;border-radius:16px;overflow:hidden;display:flex;flex-direction:column;transition:transform .12s ease, box-shadow .12s ease}
    .card:hover{transform:translateY(-2px);box-shadow:0 10px 26px rgba(0,0,0,.28)}
    .thumb{width:100%;aspect-ratio:4/5;object-fit:cover;background:#0b0e14}
    .body{padding:12px}
    .name{font-weight:800;margin:0 0 6px}
    .meta{display:flex;gap:8px;flex-wrap:wrap;margin:6px 0 10px}
    .chip{background:var(--chip);color:var(--muted);border-radius:999px;padding:4px 8px;font-size:12px;border:1px solid #2a3147}
    .text{color:var(--muted);font-size:13px;margin:0}
    .empty{opacity:.7;text-align:center;padding:40px}
    .status{color:var(--muted);font-size:13px;margin-top:14px}
    .toggle{background:var(--panel);border:1px solid #21283a;color:var(--ink);padding:10px 12px;border-radius:12px;cursor:pointer}
    .toggle[aria-pressed="true"]{outline:2px solid var(--accent)}
  </style>
</head>
<body>
  <header>
    <div class="title">Vetrina Carte<span class="badge">TOTS</span></div>
    <div class="controls">
      <button id="btnTots" class="toggle" aria-pressed="true" title="Mostra solo TOTS">Solo TOTS</button>
      <select id="roleSelect" aria-label="Filtra per ruolo">
        <option value="">Tutti i ruoli</option>
      </select>
      <input id="searchInput" type="search" placeholder="Cerca nome / tag..." aria-label="Cerca" />
    </div>
  </header>

  <main>
    <section id="cards" class="grid" aria-live="polite"></section>
    <div id="status" class="status"></div>
  </main>

  <script>
    const EL = {
      grid: document.getElementById('cards'),
      role: document.getElementById('roleSelect'),
      search: document.getElementById('searchInput'),
      status: document.getElementById('status'),
      btnTots: document.getElementById('btnTots')
    };

    // Compat: aggiunge il tag "Tots" se la carta ha series = "Tots"
    function compatAddTotsTag(cards) {
      return cards.map(c => {
        const isTots = (c.series || '').toLowerCase() === 'tots';
        const tags = Array.isArray(c.tags) ? c.tags.slice() : [];
        if (isTots && !tags.some(t => (t || '').toLowerCase() === 'tots')) tags.push('Tots');
        return { ...c, tags };
      });
    }

    // Carica cards.json, fallback a cards-ruolo.json
    async function loadData() {
      const sources = ['cards.json', 'cards-ruolo.json'];
      for (const url of sources) {
        try {
          const res = await fetch(url, { cache: 'no-store' });
          if (!res.ok) throw new Error(res.statusText);
          const data = await res.json();
          if (!Array.isArray(data)) throw new Error('Formato non valido');
          return compatAddTotsTag(data);
        } catch (e) { /* prova la prossima */ }
      }
      throw new Error('Impossibile caricare i dati.');
    }

    function normalize(v){ return (v ?? '').toString().toLowerCase(); }

    function buildRoleOptions(cards){
      const roles = [...new Set(cards.map(c => c.role).filter(Boolean))].sort((a,b)=>a.localeCompare(b));
      for (const r of roles) {
        const opt = document.createElement('option');
        opt.value = r; opt.textContent = r;
        EL.role.appendChild(opt);
      }
    }

    function render(cards){
      EL.grid.innerHTML = '';
      if (!cards.length) {
        EL.grid.innerHTML = '<div class="empty">Nessuna carta trovata.</div>';
        return;
      }
      const frag = document.createDocumentFragment();
      for (const c of cards) {
        const card = document.createElement('article');
        card.className = 'card';
        card.innerHTML = `
          <img class="thumb" alt="${c.name || 'Carta'}" src="${c.img || ''}">
          <div class="body">
            <h3 class="name">${c.name || 'Senza nome'}</h3>
            <div class="meta">
              ${c.role ? `<span class="chip">Ruolo: ${c.role}</span>` : ''}
              ${c.rarity ? `<span class="chip">${c.rarity}</span>` : ''}
              ${c.game ? `<span class="chip">${c.game}</span>` : ''}
              ${c.series ? `<span class="chip">Serie: ${c.series}</span>` : ''}
            </div>
            ${c.text ? `<p class="text">${c.text}</p>` : ''}
          </div>
        `;
        frag.appendChild(card);
      }
      EL.grid.appendChild(frag);
    }

    (async function init(){
      EL.status.textContent = 'Caricamento…';
      try {
        const all = await loadData();
        buildRoleOptions(all);

        // Stato UI
        let onlyTots = true;

        function getFiltered(){
          const role = normalize(EL.role.value);
          const q = normalize(EL.search.value);
          return all
            .filter(c => !onlyTots || (c.tags && c.tags.some(t => normalize(t) === 'tots')))
            .filter(c => !role || normalize(c.role) === role)
            .filter(c => {
              if (!q) return true;
              const hay = [
                c.name, c.text, c.game, c.rarity, c.role, c.series,
                ...(Array.isArray(c.tags) ? c.tags : [])
              ].map(normalize).join(' ');
              return hay.includes(q);
            });
        }

        function update(){
          const list = getFiltered();
          render(list);
          const label = onlyTots ? 'solo TOTS' : 'tutte';
          EL.status.textContent = `Mostrate ${list.length} carte (${label}).`;
        }

        // Eventi
        EL.role.addEventListener('change', update);
        EL.search.addEventListener('input', update);
        EL.btnTots.addEventListener('click', () => {
          onlyTots = !onlyTots;
          EL.btnTots.setAttribute('aria-pressed', String(onlyTots));
          EL.btnTots.textContent = onlyTots ? 'Solo TOTS' : 'Tutte le serie';
          update();
        });

        update();
      } catch (err) {
        EL.status.textContent = 'Errore: ' + err.message;
      }
    })();
  </script>
</body>
</html>
